version: 2
jobs:
  build:
    branches:
      only:
        - circleci
        - master
        - production
        - new

    working_directory: ~/rbc
    docker:
      - image: circleci/python:3.6.4
        environment: 
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - checkout
#       #- run: sudo chown -R circleci:circleci /usr/local/bin
#       #- run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name : Installing Dependencies
          command : |
            sudo apt-get install libsasl2-dev python-dev libldap2-dev libssl-dev
            virtualenv .env
            source .env/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
             - ".env"
#       - run:
#           name: Updating apt and install Ansible and pipenv
#           command: |
#             sudo apt-get update
# #            sudo pip install ansible
# #            sudo pip install pipenv
# #            pipenv install
      - run:
          name: Simulate Django Migrations and Unit Test
          command: |
            sudo apt-get install libsasl2-dev python-dev libldap2-dev libssl-dev
            virtualenv .env
            source .env/bin/activate 
            python manage.py migrate
            python manage.py test
      - run:
          name: Merge master branch to prod
          command: |
            if [ "$CIRCLE_BRANCH" == "master" ];
            then
              git config user.email "rbchall.official@gmail.com" ;
              git config user.name "rbchall" ;
              git checkout production ;
              git rebase master ;
              git push origin production ; 
            fi

#      - run:
#          name: Deploy production
#          command: |
#            if [ "$CIRCLE_BRANCH" == "production" ];
#            then
#              cd deploy ;
#              ansible -i hosts  prod -m ping  -u ubuntu ;
#              ansible-playbook -i hosts  deploy.yml -u ubuntu  ;
#            fi
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: tr1