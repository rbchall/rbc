version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.4
#      - environment: 
#          PIPENV_VENV_IN_PROJECT: true
    working_directory: /srv/www/rbc/          
    branches:
      only:
        - circleci
        - master
        - production
        - new
    steps:
      - checkout
      #- run: sudo chown -R circleci:circleci /usr/local/bin
      #- run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - restore_cache:
          keys:
#          - deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            #python3 -m venv venv
            #whoami
            #sudo pip install pipenv
            #pipenv install
            source /home/ubuntu/virtualenvs/rbc/bin/activate
            pip install -r requirements.txt
      - save_cache:
          keys: 
          - deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          - v1-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - "/home/ubuntu/virtualenvs/rbc/"
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: Deploy Django
          command: |
            #            pipenv run "python manage.py test"
            python manage.py test
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: tr1
      - run:
          name: Updating apt and install Ansible and pipenv
          command: |
            sudo apt-get update
#            sudo pip install ansible
#            sudo pip install pipenv
#            pipenv install
      - run:
          name: Merge master branch to prod
          command: |
            if [ "$CIRCLE_BRANCH" == "master" ];
            then
              git config user.email "rbchall.official@gmail.com" ;
              git config user.name "rbchall" ;
              git checkout production ;
              git rebase master ;
              git push origin production ; 
            fi
      - run:
          name: Deploy Django
          command: |
            if [ "$CIRCLE_BRANCH" == "production" ];
              source /home/ubuntu/virtualenvs/rbc/bin/activate
              python srv/www/rbc/manage.py migrate
            fi

#      - run:
#          name: Deploy production
#          command: |
#            if [ "$CIRCLE_BRANCH" == "production" ];
#            then
#              cd deploy ;
#              ansible -i hosts  prod -m ping  -u ubuntu ;
#              ansible-playbook -i hosts  deploy.yml -u ubuntu  ;
#            fi
